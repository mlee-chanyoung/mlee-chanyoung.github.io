title: "My Projects"
description: "Here’s some highlights of the projects that I’ve worked on, showcasing the skills and experience I’ve gained."
cta: "View Project"

about:
  title: "What Even Is This?"
  languages: "Languages & Frameworks"
  tools: "Relevant Tools & Services"

highlights:
  title: "Highlights"

list:
  ramsey-preferred-coach-app:
    title: "Ramsey Preferred Coach"
    description: ""
  financial-coach-master-training:
    title: "Financial Coach Master Training"
    description: ""
  magnolia:
    title: "Magnolia CMS"
    description: ""
  facebook-ads:
    title: "Facebook Lead Form Ads"
    description: "AWS cloud computing systems that enable the usage of Facebook lead form ads to connect with our lead funnel."
    full-description: |
      <p>An essential part of the Coaching team’s lead funnel at Ramsey Solutions involves getting potential customers to sign up for an informational webinar. Users are directed to a landing page to register for the webinar, and much of the traffic is driven there via Facebook ads. Though the formula had a lot of success, the marketing team wanted to test out simplifying this process with a relatively new feature on Facebook: lead form ads. This new type of ad would allow those who viewed the ad to fill out a form directly on Facebook, rather than having to be redirected to a different page to fill it out.</p>
      <p>In order to replicate the functions of the lead form on the landing page, however, additional work was required. Another team had also tried a similar experiment, so they had already laid the ground work to retrieve the form submission data and pass it to us in a state we could use; all we had to do was create something to handle it.</p>
      <p>To that end, I was tasked with creating an Amazon Web Services (AWS) Lambda to handle the lead submissions, which needed to register a user for a webinar on Zoom, add them to a CRM for our sales reps to see, and add them to our email marketing system so that they could receive further communications.
    languages:
      - "Python"
      - "Pytest"
    tools:
      - "Amazon Web Services (AWS) Lambda"
      - "AWS Parameter Store"
      - "Zoom"
      - "Salesforce Sales & Marketing Cloud"
      - "Klaviyo"
      - "Apophenia"
      - "Loggly"
    highlights:
      - title: "Connecting the Services"
        image: "/assets/img/projects/facebook-ads/main.png"
        image-description: "The lead form ad’s form"
        description: |
          <p>The most essential piece of this lambda is connecting together the different services that are used in the lead funnel. Multiple API calls were set up in order to register users for the webinar, add them into our lead funnel, etc.</p>
          <p>As it’s a business critical process, logs recording any issues with the API calls were set up using Apophenia, and alerts were created on Loggly to monitor that the process was running smoothly.</p>
      - title: "Reuse"
        image: "/assets/img/projects/facebook-ads/reuse.png"
        image-description: "The landing page’s webinar form"
        description: |
          <p>Though the marketing team ultimately decided to move away from using lead form ads, the work was not done in vain. Using AWS API Gateway, the webinar registration landing page was modified to point to this lambda, greatly simplyfing the process on the CMS side.</p>
          <p>Further, this first foray into lambdas enabled our team to create more lambdas down the line, which helped us automate other parts of the sales process as well.
  monita:
    title: "Monita"
    description: "A dashboard application that visualizes the status of the various applications and servers my team is responsible for in a way that is simple to understand."
    full-description: |
      <p>The Common Platforms team at the Chick-fil-A Support Center focuses on maintaining and improving the systems and services that the other teams in the IT department rely on. A large part of their responsibilities includes keeping an eye on all of the servers and applications that they are in charge of and troubleshooting any errors that come up. As expected, this is a critical role that impacts the rest of the department, but it can be a time consuming task as well, taking away valuable time from other projects that the team would like to focus on.</p>
      <p>As an intern on their team for the summer, I was tasked with developing an internal web application—Monita—that consolidates the status information of the many servers and applications my team monitors in a way that is easy to understand at a glance. Further, the devices are connected and displayed in a graph to visualize the dependencies and make it simple to trace any errors back to the source.</p>
      <p>The server-side was developed using the Flask micro web framework, while client-side was handled using jQuery and Bootstrap. This application is hosted on Amazon Web Services’s Elastic Beanstalk and utilizes Okta’s two-factor authentication to prevent unauthorized access.</p>
    languages:
      - "Flask (Python)"
      - "jQuery"
      - "SCSS"
      - "Bootstrap 4"
      - "Jinja2 (HTML5)"
    tools:
      - "Amazon Web Services (AWS) Elastic Beanstalk"
      - "Okta"
      - "Subversion"
    highlights:
      - title: "The Status Graph"
        image: "/assets/img/projects/monita/main.png"
        image-description: "Graph to monitor system statuses."
        description: |
          <p>Monita’s main feature is a graph of servers and applications. Each node on the graph depicts some system, and its icon represents the system’s status, color-coded for severity. The edges represent direct interactions between systems, such as between an application and its database. Nodes on the graph can also be interacted with to re-arrange the layout.</p>
      - title: "Viewing Individual Nodes"
        image: "/assets/img/projects/monita/node.png"
        image-description: "Modal with an individual node’s detailed information."
        description: |
          <p>Once an individual node on the graph is selected, it brings up a modal window that displays more detailed information about that node. All active alerts are listed, and a list of all historical alerts can be retrieved as well.</p>
          <p>Some nodes are made up of several sub-elements as well, and that family tree can be navigated here as well, allowing the user to identify the specific source of an alert.</p>
  connect-four:
    title: "Connect 4"
    description: ""
